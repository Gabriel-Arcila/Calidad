@page "/FormatoAdicionales"

@inject NotificationService NotificationService

@inject IDataPNCRiesgo DataPNCRiesgo
@inject IDataPNCPropuestaDisposicion DataPNCPropuestaDisposicion
@inject IDataPNCCausa DataPNCCausa
@inject IDataPNCCausante DataPNCCausante

<PageTitle>Formatos Adicionales</PageTitle>

<AuthorizeView Context="autorized" Roles="SuperAdmin,SuperUser,UserPaisCalidad,UserEmpresaCalidad,UserCentroCalidad">
    <Authorized>
        <RadzenText TextStyle="TextStyle.DisplayH5" class="rz-background-color-success-dark rz-color-white rz-border-radius rz-p-2 rz-mb-5">
            Formatos 
        </RadzenText>

        

        <RadzenTemplateForm TItem="PncproDisp" Data=@alternativaDisposicion Submit=@OKAlternativaDisposicion>
            <RadzenFieldset Text="Formatos de Alternativa Propuesta de Disposición">
                <RadzenStack Gap="2rem" Class="rz-p-1 rz-p-md-2">
                    <RadzenRow AlignItems="AlignItems.Center" RowGap="0.25rem">
                        <RadzenColumn Size="12" SizeMD="5" Class="rz-text-align-start rz-text-align-md-start">
                            <RadzenFormField  Variant="Variant.Flat" style="width: 98%;" Size="12" SizeMD="12" Text="Alternativa Propuesta de Disposición">
                                <RadzenTextBox Name="nombreAlternativaDisposicion" @bind-Value=alternativaDisposicion.Pdnombre  class="w-100" />
                            </RadzenFormField>
                            <RadzenRequiredValidator Component="nombreAlternativaDisposicion" Text="Requerido" Popup=@popup Style="position: relative"/>
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="7" Class="rz-text-align-start rz-text-align-md-start">
                            <RadzenFormField  Variant="Variant.Flat" style="width: 98%;" Size="12" SizeMD="12" Text="Descripcion">
                                <RadzenTextBox  @bind-Value=alternativaDisposicion.Pddescri  class="w-100" />
                            </RadzenFormField>
                        </RadzenColumn>
                    </RadzenRow>
                    <RadzenRow AlignItems="AlignItems.Center" RowGap="0.25rem">
                        <RadzenColumn Size="12" SizeMD="12" Class="rz-text-align-start rz-text-align-md-start">
                            <RadzenButton ButtonType="ButtonType.Submit" Variant="Variant.Outlined" Disabled="@isDisabledButton" Text="Registrar" ButtonStyle="ButtonStyle.Success" />
                            <RadzenButton ButtonType="ButtonType.Reset" Variant="Variant.Outlined" Disabled="@isDisabledButton" Click=BorrarAlternativaDisposicion Text="Borrar" ButtonStyle="ButtonStyle.Danger" />
                        </RadzenColumn>
                    </RadzenRow>
                </RadzenStack>
            </RadzenFieldset>
        </RadzenTemplateForm>

        <RadzenTemplateForm TItem="Pnccausa" Data=@causa Submit=@OKCausa>
            <RadzenFieldset Text="Formatos de No Conformidades">
                <RadzenStack Gap="2rem" Class="rz-p-1 rz-p-md-2">
                    <RadzenRow AlignItems="AlignItems.Center" RowGap="0.25rem">
                            <RadzenColumn Size="12" SizeMD="5" Class="rz-text-align-start rz-text-align-md-start">
                                <RadzenFormField  Variant="Variant.Flat" style="width: 98%;" Size="12" SizeMD="12" Text="RESPONSABLE / CAUSANTE">
                                    <RadzenDropDown Name="CAUSANTE" AllowClear="true" @bind-Value=idCausante TextProperty="Cnombre" ValueProperty="IdCausante" AllowVirtualization="true" AllowFiltering="true" Data=@listaCausante  Style="width: 100%;" /> 
                                </RadzenFormField>
                                <RadzenRequiredValidator Component="CAUSANTE" Text="Requerido" Popup=@popup Style="position: relative"/>
                            </RadzenColumn>
                    </RadzenRow>
                    <RadzenRow AlignItems="AlignItems.Center" RowGap="0.25rem">
                        <RadzenColumn Size="12" SizeMD="5" Class="rz-text-align-start rz-text-align-md-start">
                            <RadzenFormField  Variant="Variant.Flat" style="width: 98%;" Size="12" SizeMD="12" Text="Causa">
                                <RadzenTextBox Name="causa" @bind-Value=causa.Cnombre  class="w-100" />
                            </RadzenFormField>
                            <RadzenRequiredValidator Component="causa" Text="Requerido" Popup=@popup Style="position: relative"/>
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="7" Class="rz-text-align-start rz-text-align-md-start">
                            <RadzenFormField  Variant="Variant.Flat" style="width: 98%;" Size="12" SizeMD="12" Text="Descripcion">
                                <RadzenTextBox  @bind-Value=causa.Cdescri  class="w-100" />
                            </RadzenFormField>
                        </RadzenColumn>
                    </RadzenRow>
                    <RadzenRow AlignItems="AlignItems.Center" RowGap="0.25rem">
                        <RadzenColumn Size="12" SizeMD="12" Class="rz-text-align-start rz-text-align-md-start">
                            <RadzenButton ButtonType="ButtonType.Submit" Variant="Variant.Outlined" Disabled="@isDisabledButton" Text="Registrar" ButtonStyle="ButtonStyle.Success" />
                            <RadzenButton ButtonType="ButtonType.Reset" Variant="Variant.Outlined" Disabled="@isDisabledButton" Click=BorrarCausa Text="Borrar" ButtonStyle="ButtonStyle.Danger" />
                        </RadzenColumn>
                    </RadzenRow>
                </RadzenStack>
            </RadzenFieldset>
        </RadzenTemplateForm>

    </Authorized>
    <NotAuthorized>
        <RadzenText TextStyle="TextStyle.DisplayH5" class="rz-background-color-success-dark rz-color-white rz-border-radius rz-p-2 rz-mb-5">
            No tiene Acceso a este modulo
        </RadzenText>
    </NotAuthorized>
</AuthorizeView>


@code{
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }
    private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();
    private PncproDisp alternativaDisposicion {get; set;} = new PncproDisp();
    private Pnccausa causa {get; set;} = new Pnccausa();
    private List<Pnccausante> listaCausante {get; set;}
    private bool popup {get; set;} = false; 
    private bool isDisabledButton {get; set;} = false;
    private bool allOk {get; set;} 
    private int idCausante {get; set;}  = 1;
    private bool isCargado {get; set;}

    protected override async Task OnInitializedAsync()
    {
        isCargado = false;
        if (authenticationState is not null)
        {
            AuthenticationState? authState = await authenticationState;
            ClaimsPrincipal? user = authState?.User;
            if (user?.Identity is not null && user.Identity.IsAuthenticated)
            {
                listaCausante = await DataPNCCausante.ObtenerTodosLosCausantes();
                idCausante = 1;
            }
        }
        isCargado = false;
    }

    protected async Task OKAlternativaDisposicion(){
        isDisabledButton = true;

        Notificacion("info","","Cagando...");
        
        alternativaDisposicion.Pdestado = true;
        allOk = await DataPNCPropuestaDisposicion.InsertarPropuestaDisposicion(alternativaDisposicion);

        if(allOk){
            alternativaDisposicion = new PncproDisp();
            Notificacion("exito","","Registrado con exito");
        }else{
            Notificacion("error","Error"," Realice nuevamente la carga");
        }

        isDisabledButton = false;
    }

    protected async Task OKCausa(){
        isDisabledButton = true;

        Notificacion("info","","Cagando...");
        
        causa.Cestado = true;
        causa.IdCausante = idCausante;
        allOk = await DataPNCCausa.InsertarCausa(causa);

        if(allOk){
            causa = new Pnccausa();
            Notificacion("exito","","Registrado con exito");
        }else{
            Notificacion("error","Error"," Realice nuevamente la carga");
        }

        isDisabledButton = false;
    }

    protected void BorrarAlternativaDisposicion(){
        alternativaDisposicion = new PncproDisp();
    }

    protected void BorrarCausa(){
        causa = new Pnccausa();
    }

    public void Notificacion(string tipo,string mensaje,string detalle)
    {

        NotificationMessage notificacion = new NotificationMessage{};
        if(tipo == "error"){
            notificacion = new NotificationMessage { Severity = NotificationSeverity.Error, Summary = mensaje, Detail = detalle, Duration = 8000 };
        }else if(tipo == "info"){
            notificacion = new NotificationMessage { Severity = NotificationSeverity.Info, Summary = mensaje, Detail = detalle, Duration = 8000 };
        }else if(tipo == "exito"){
            notificacion = new NotificationMessage { Severity = NotificationSeverity.Success, Summary = mensaje, Detail = detalle, Duration = 8000 };
        }else if(tipo == "advertencia"){
            notificacion = new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = mensaje, Detail = detalle, Duration = 8000 };
        }
        NotificationService.Notify(notificacion);
    } 
}

